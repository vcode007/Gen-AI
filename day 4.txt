{
    "bookstore": {
        "book": [
            {
                "title": "Harry Potter",
                "author": "J.K. Rowling",
                "price": 29.99,
                "available": true
            },
            {
                "title": "The Hobbit",
                "author": "J.R.R. Tolkien",
                "price": 19.99,
                "available": false
            }
        ]
    }
}



create table dept( 
dept_id int, 
dept_name varchar(20), 
primary key (dept_id) 
); 
create table employee ( 
emp_id int, 
first_name varchar(20), 
last_name varchar(20), 
dept_id int, 
primary key(emp_id), 
foreign key(dept_id) references dept(dept_id) 
); 
insert into dept values 
(10,"HR"), 
(20,"Sales"), 
(30,"IT"), 
(40,"Marketing"); 
insert into employee values 
(1,"jhon","doe",10), 
(2,"jane","smith",20), 
(3,"mike","jhonson",30), 
(4,"emily","davis",10); 
INNER JOIN: Retrieves only the rows that have matching values in both tables. 
select * from employee 
INNER JOIN dept on employee.dept_id = dept.dept_id; 
+--------+------------+-----------+---------+---------+-----------+ 
| emp_id | first_name | last_name | dept_id | dept_id | dept_name | 
+--------+------------+-----------+---------+---------+-----------+ 
| 1 | jhon | doe | 10 | 10 | HR | 
| 2 | jane | smith | 20 | 20 | Sales | 
| 3 | mike | jhonson | 30 | 30 | IT | 
| 4 | emily | davis | 10 | 10 | HR | 
+--------+------------+-----------+---------+---------+-----------+ 
LEFT OUTER JOIN: Retrieves all rows from the left table and the matching rows from the right 
table. If there is no match, the right side will show NULL. 
select * from employee 
LEFT OUTER JOIN dept on employee.dept_id = dept.dept_id; 
+--------+------------+-----------+---------+---------+-----------+ 
| emp_id | first_name | last_name | dept_id | dept_id | dept_name | 
+--------+------------+-----------+---------+---------+-----------+ 
| 1 | jhon | doe | 10 | 10 | HR | 
| 2 | jane | smith | 20 | 20 | Sales | 
| 3 | mike | jhonson | 30 | 30 | IT | 
| 4 | emily | davis | 10 | 10 | HR | 
+--------+------------+-----------+---------+---------+-----------+ 
RIGHT OUTER JOIN: Retrieves all rows from the right table and the matching rows from the left 
table. If there is no match, the left side will show NULL. 
select * from employee 
RIGHT OUTER JOIN dept on employee.dept_id = dept.dept_id; 
+--------+------------+-----------+---------+---------+-----------+ 
| emp_id | first_name | last_name | dept_id | dept_id | dept_name | 
+--------+------------+-----------+---------+---------+-----------+ 
| 1 | jhon | doe | 10 | 10 | HR | 
| 4 | emily | davis | 10 | 10 | HR | 
| 2 | jane | smith | 20 | 20 | Sales | 
| 3 | mike | jhonson | 30 | 30 | IT | 
| NULL | NULL | NULL | NULL | 40 | Marketing | 
+--------+------------+-----------+---------+---------+-----------+ 
FULL OUTER JOIN: Retrieves all rows from both tables, showing NULL where there is no match in 
either table 
select * from employee 
FULL OUTER JOIN dept on employee.dept_id = dept.dept_id; 
+--------+------------+-----------+---------+---------+-----------+ 
| emp_id | first_name | last_name | dept_id | dept_id | dept_name | 
+--------+------------+-----------+---------+---------+-----------+ 
| 1 | jhon | doe | 10 | 10 | HR | 
| 2 | jane | smith | 20 | 20 | Sales | 
| 3 | mike | jhonson | 30 | 30 | IT | 
| 4 | emily | davis | 10 | 10 | HR | 
| NULL | NULL | NULL | NULL | 40 | Marketing | 
+--------+------------+-----------+---------+---------+-----------+ 
SELECT first_name, COUNT(*) 
FROM Employee 
GROUP BY first_name 
HAVING COUNT(*) > 1; 
+------------+----------+ 
| first_name | COUNT(*) | 
+------------+----------+ 
| John | 2 | 
+------------+----------+ 
SELECT email, COUNT(*) 
FROM Employee 
GROUP BY email 
HAVING COUNT(*) > 1; 
+----------------------+----------+ 
| email | COUNT(*) | 
+----------------------+----------+ 
| john.doe@example.com | 2 | 
+----------------------+----------+ 
SELECT first_name, last_name, COUNT(*) 
FROM Employee 
GROUP BY first_name, last_name 
HAVING COUNT(*) > 1; 
+------------+-----------+----------+ 
| first_name | last_name | COUNT(*) | 
+------------+-----------+----------+ 
| John | Doe | 2 | 
+------------+-----------+----------+ 
SELECT first_name, email, COUNT(*) 
FROM Employee 
GROUP BY first_name, email 
HAVING COUNT(*) > 1; 
+------------+----------------------+----------+ 
| first_name | email | COUNT(*) | 
+------------+----------------------+----------+ 
| John | john.doe@example.com | 2 | 
+------------+----------------------+----------+ 



